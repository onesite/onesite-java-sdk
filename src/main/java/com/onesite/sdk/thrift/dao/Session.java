/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.onesite.sdk.thrift.dao;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Session implements org.apache.thrift.TBase<Session, Session._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Session");

  private static final org.apache.thrift.protocol.TField CORE_U_FIELD_DESC = new org.apache.thrift.protocol.TField("coreU", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CORE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("coreX", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SESSION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionData", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("agent", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXPIRES_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expiresTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SessionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SessionTupleSchemeFactory());
  }

  public String coreU; // required
  public String coreX; // required
  public String accessToken; // required
  public Map<String,String> sessionData; // required
  public String status; // required
  public String ip; // required
  public String agent; // required
  public long expiresTime; // required
  public User user; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CORE_U((short)1, "coreU"),
    CORE_X((short)2, "coreX"),
    ACCESS_TOKEN((short)3, "accessToken"),
    SESSION_DATA((short)4, "sessionData"),
    STATUS((short)5, "status"),
    IP((short)6, "ip"),
    AGENT((short)7, "agent"),
    EXPIRES_TIME((short)8, "expiresTime"),
    USER((short)9, "user");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CORE_U
          return CORE_U;
        case 2: // CORE_X
          return CORE_X;
        case 3: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 4: // SESSION_DATA
          return SESSION_DATA;
        case 5: // STATUS
          return STATUS;
        case 6: // IP
          return IP;
        case 7: // AGENT
          return AGENT;
        case 8: // EXPIRES_TIME
          return EXPIRES_TIME;
        case 9: // USER
          return USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRESTIME_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CORE_U, new org.apache.thrift.meta_data.FieldMetaData("coreU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORE_X, new org.apache.thrift.meta_data.FieldMetaData("coreX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_DATA, new org.apache.thrift.meta_data.FieldMetaData("sessionData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENT, new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRES_TIME, new org.apache.thrift.meta_data.FieldMetaData("expiresTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Session.class, metaDataMap);
  }

  public Session() {
  }

  public Session(
    String coreU,
    String coreX,
    String accessToken,
    Map<String,String> sessionData,
    String status,
    String ip,
    String agent,
    long expiresTime,
    User user)
  {
    this();
    this.coreU = coreU;
    this.coreX = coreX;
    this.accessToken = accessToken;
    this.sessionData = sessionData;
    this.status = status;
    this.ip = ip;
    this.agent = agent;
    this.expiresTime = expiresTime;
    setExpiresTimeIsSet(true);
    this.user = user;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Session(Session other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCoreU()) {
      this.coreU = other.coreU;
    }
    if (other.isSetCoreX()) {
      this.coreX = other.coreX;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    if (other.isSetSessionData()) {
      Map<String,String> __this__sessionData = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.sessionData.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__sessionData_copy_key = other_element_key;

        String __this__sessionData_copy_value = other_element_value;

        __this__sessionData.put(__this__sessionData_copy_key, __this__sessionData_copy_value);
      }
      this.sessionData = __this__sessionData;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetAgent()) {
      this.agent = other.agent;
    }
    this.expiresTime = other.expiresTime;
    if (other.isSetUser()) {
      this.user = new User(other.user);
    }
  }

  public Session deepCopy() {
    return new Session(this);
  }

  @Override
  public void clear() {
    this.coreU = null;
    this.coreX = null;
    this.accessToken = null;
    this.sessionData = null;
    this.status = null;
    this.ip = null;
    this.agent = null;
    setExpiresTimeIsSet(false);
    this.expiresTime = 0;
    this.user = null;
  }

  public String getCoreU() {
    return this.coreU;
  }

  public Session setCoreU(String coreU) {
    this.coreU = coreU;
    return this;
  }

  public void unsetCoreU() {
    this.coreU = null;
  }

  /** Returns true if field coreU is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreU() {
    return this.coreU != null;
  }

  public void setCoreUIsSet(boolean value) {
    if (!value) {
      this.coreU = null;
    }
  }

  public String getCoreX() {
    return this.coreX;
  }

  public Session setCoreX(String coreX) {
    this.coreX = coreX;
    return this;
  }

  public void unsetCoreX() {
    this.coreX = null;
  }

  /** Returns true if field coreX is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreX() {
    return this.coreX != null;
  }

  public void setCoreXIsSet(boolean value) {
    if (!value) {
      this.coreX = null;
    }
  }

  public String getAccessToken() {
    return this.accessToken;
  }

  public Session setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public int getSessionDataSize() {
    return (this.sessionData == null) ? 0 : this.sessionData.size();
  }

  public void putToSessionData(String key, String val) {
    if (this.sessionData == null) {
      this.sessionData = new HashMap<String,String>();
    }
    this.sessionData.put(key, val);
  }

  public Map<String,String> getSessionData() {
    return this.sessionData;
  }

  public Session setSessionData(Map<String,String> sessionData) {
    this.sessionData = sessionData;
    return this;
  }

  public void unsetSessionData() {
    this.sessionData = null;
  }

  /** Returns true if field sessionData is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionData() {
    return this.sessionData != null;
  }

  public void setSessionDataIsSet(boolean value) {
    if (!value) {
      this.sessionData = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public Session setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public Session setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getAgent() {
    return this.agent;
  }

  public Session setAgent(String agent) {
    this.agent = agent;
    return this;
  }

  public void unsetAgent() {
    this.agent = null;
  }

  /** Returns true if field agent is set (has been assigned a value) and false otherwise */
  public boolean isSetAgent() {
    return this.agent != null;
  }

  public void setAgentIsSet(boolean value) {
    if (!value) {
      this.agent = null;
    }
  }

  public long getExpiresTime() {
    return this.expiresTime;
  }

  public Session setExpiresTime(long expiresTime) {
    this.expiresTime = expiresTime;
    setExpiresTimeIsSet(true);
    return this;
  }

  public void unsetExpiresTime() {
    __isset_bit_vector.clear(__EXPIRESTIME_ISSET_ID);
  }

  /** Returns true if field expiresTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiresTime() {
    return __isset_bit_vector.get(__EXPIRESTIME_ISSET_ID);
  }

  public void setExpiresTimeIsSet(boolean value) {
    __isset_bit_vector.set(__EXPIRESTIME_ISSET_ID, value);
  }

  public User getUser() {
    return this.user;
  }

  public Session setUser(User user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CORE_U:
      if (value == null) {
        unsetCoreU();
      } else {
        setCoreU((String)value);
      }
      break;

    case CORE_X:
      if (value == null) {
        unsetCoreX();
      } else {
        setCoreX((String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((String)value);
      }
      break;

    case SESSION_DATA:
      if (value == null) {
        unsetSessionData();
      } else {
        setSessionData((Map<String,String>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case AGENT:
      if (value == null) {
        unsetAgent();
      } else {
        setAgent((String)value);
      }
      break;

    case EXPIRES_TIME:
      if (value == null) {
        unsetExpiresTime();
      } else {
        setExpiresTime((Long)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((User)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CORE_U:
      return getCoreU();

    case CORE_X:
      return getCoreX();

    case ACCESS_TOKEN:
      return getAccessToken();

    case SESSION_DATA:
      return getSessionData();

    case STATUS:
      return getStatus();

    case IP:
      return getIp();

    case AGENT:
      return getAgent();

    case EXPIRES_TIME:
      return Long.valueOf(getExpiresTime());

    case USER:
      return getUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CORE_U:
      return isSetCoreU();
    case CORE_X:
      return isSetCoreX();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case SESSION_DATA:
      return isSetSessionData();
    case STATUS:
      return isSetStatus();
    case IP:
      return isSetIp();
    case AGENT:
      return isSetAgent();
    case EXPIRES_TIME:
      return isSetExpiresTime();
    case USER:
      return isSetUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Session)
      return this.equals((Session)that);
    return false;
  }

  public boolean equals(Session that) {
    if (that == null)
      return false;

    boolean this_present_coreU = true && this.isSetCoreU();
    boolean that_present_coreU = true && that.isSetCoreU();
    if (this_present_coreU || that_present_coreU) {
      if (!(this_present_coreU && that_present_coreU))
        return false;
      if (!this.coreU.equals(that.coreU))
        return false;
    }

    boolean this_present_coreX = true && this.isSetCoreX();
    boolean that_present_coreX = true && that.isSetCoreX();
    if (this_present_coreX || that_present_coreX) {
      if (!(this_present_coreX && that_present_coreX))
        return false;
      if (!this.coreX.equals(that.coreX))
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    boolean this_present_sessionData = true && this.isSetSessionData();
    boolean that_present_sessionData = true && that.isSetSessionData();
    if (this_present_sessionData || that_present_sessionData) {
      if (!(this_present_sessionData && that_present_sessionData))
        return false;
      if (!this.sessionData.equals(that.sessionData))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_agent = true && this.isSetAgent();
    boolean that_present_agent = true && that.isSetAgent();
    if (this_present_agent || that_present_agent) {
      if (!(this_present_agent && that_present_agent))
        return false;
      if (!this.agent.equals(that.agent))
        return false;
    }

    boolean this_present_expiresTime = true;
    boolean that_present_expiresTime = true;
    if (this_present_expiresTime || that_present_expiresTime) {
      if (!(this_present_expiresTime && that_present_expiresTime))
        return false;
      if (this.expiresTime != that.expiresTime)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_coreU = true && (isSetCoreU());
    builder.append(present_coreU);
    if (present_coreU)
      builder.append(coreU);

    boolean present_coreX = true && (isSetCoreX());
    builder.append(present_coreX);
    if (present_coreX)
      builder.append(coreX);

    boolean present_accessToken = true && (isSetAccessToken());
    builder.append(present_accessToken);
    if (present_accessToken)
      builder.append(accessToken);

    boolean present_sessionData = true && (isSetSessionData());
    builder.append(present_sessionData);
    if (present_sessionData)
      builder.append(sessionData);

    boolean present_status = true && (isSetStatus());
    builder.append(present_status);
    if (present_status)
      builder.append(status);

    boolean present_ip = true && (isSetIp());
    builder.append(present_ip);
    if (present_ip)
      builder.append(ip);

    boolean present_agent = true && (isSetAgent());
    builder.append(present_agent);
    if (present_agent)
      builder.append(agent);

    boolean present_expiresTime = true;
    builder.append(present_expiresTime);
    if (present_expiresTime)
      builder.append(expiresTime);

    boolean present_user = true && (isSetUser());
    builder.append(present_user);
    if (present_user)
      builder.append(user);

    return builder.toHashCode();
  }

  public int compareTo(Session other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Session typedOther = (Session)other;

    lastComparison = Boolean.valueOf(isSetCoreU()).compareTo(typedOther.isSetCoreU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreU, typedOther.coreU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoreX()).compareTo(typedOther.isSetCoreX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreX, typedOther.coreX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionData()).compareTo(typedOther.isSetSessionData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionData, typedOther.sessionData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgent()).compareTo(typedOther.isSetAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, typedOther.agent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiresTime()).compareTo(typedOther.isSetExpiresTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiresTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiresTime, typedOther.expiresTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Session(");
    boolean first = true;

    sb.append("coreU:");
    if (this.coreU == null) {
      sb.append("null");
    } else {
      sb.append(this.coreU);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coreX:");
    if (this.coreX == null) {
      sb.append("null");
    } else {
      sb.append(this.coreX);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessToken:");
    if (this.accessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.accessToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionData:");
    if (this.sessionData == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agent:");
    if (this.agent == null) {
      sb.append("null");
    } else {
      sb.append(this.agent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiresTime:");
    sb.append(this.expiresTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SessionStandardSchemeFactory implements SchemeFactory {
    public SessionStandardScheme getScheme() {
      return new SessionStandardScheme();
    }
  }

  private static class SessionStandardScheme extends StandardScheme<Session> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Session struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CORE_U
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coreU = iprot.readString();
              struct.setCoreUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CORE_X
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coreX = iprot.readString();
              struct.setCoreXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SESSION_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.sessionData = new HashMap<String,String>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10; // required
                  String _val11; // required
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.sessionData.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setSessionDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agent = iprot.readString();
              struct.setAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPIRES_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiresTime = iprot.readI64();
              struct.setExpiresTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new User();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Session struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.coreU != null) {
        oprot.writeFieldBegin(CORE_U_FIELD_DESC);
        oprot.writeString(struct.coreU);
        oprot.writeFieldEnd();
      }
      if (struct.coreX != null) {
        oprot.writeFieldBegin(CORE_X_FIELD_DESC);
        oprot.writeString(struct.coreX);
        oprot.writeFieldEnd();
      }
      if (struct.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.accessToken);
        oprot.writeFieldEnd();
      }
      if (struct.sessionData != null) {
        oprot.writeFieldBegin(SESSION_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.sessionData.size()));
          for (Map.Entry<String, String> _iter12 : struct.sessionData.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.agent != null) {
        oprot.writeFieldBegin(AGENT_FIELD_DESC);
        oprot.writeString(struct.agent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRES_TIME_FIELD_DESC);
      oprot.writeI64(struct.expiresTime);
      oprot.writeFieldEnd();
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SessionTupleSchemeFactory implements SchemeFactory {
    public SessionTupleScheme getScheme() {
      return new SessionTupleScheme();
    }
  }

  private static class SessionTupleScheme extends TupleScheme<Session> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Session struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCoreU()) {
        optionals.set(0);
      }
      if (struct.isSetCoreX()) {
        optionals.set(1);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(2);
      }
      if (struct.isSetSessionData()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetIp()) {
        optionals.set(5);
      }
      if (struct.isSetAgent()) {
        optionals.set(6);
      }
      if (struct.isSetExpiresTime()) {
        optionals.set(7);
      }
      if (struct.isSetUser()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCoreU()) {
        oprot.writeString(struct.coreU);
      }
      if (struct.isSetCoreX()) {
        oprot.writeString(struct.coreX);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
      if (struct.isSetSessionData()) {
        {
          oprot.writeI32(struct.sessionData.size());
          for (Map.Entry<String, String> _iter13 : struct.sessionData.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetAgent()) {
        oprot.writeString(struct.agent);
      }
      if (struct.isSetExpiresTime()) {
        oprot.writeI64(struct.expiresTime);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Session struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.coreU = iprot.readString();
        struct.setCoreUIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coreX = iprot.readString();
        struct.setCoreXIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sessionData = new HashMap<String,String>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16; // required
            String _val17; // required
            _key16 = iprot.readString();
            _val17 = iprot.readString();
            struct.sessionData.put(_key16, _val17);
          }
        }
        struct.setSessionDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.agent = iprot.readString();
        struct.setAgentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.expiresTime = iprot.readI64();
        struct.setExpiresTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.user = new User();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
    }
  }

}

