/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.onesite.sdk.thrift.dao;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExternalAccount implements org.apache.thrift.TBase<ExternalAccount, ExternalAccount._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExternalAccount");

  private static final org.apache.thrift.protocol.TField PROVIDER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("providerName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdentifier", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExternalAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExternalAccountTupleSchemeFactory());
  }

  public String providerName; // required
  public String userIdentifier; // required
  public String accessToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROVIDER_NAME((short)1, "providerName"),
    USER_IDENTIFIER((short)2, "userIdentifier"),
    ACCESS_TOKEN((short)3, "accessToken");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROVIDER_NAME
          return PROVIDER_NAME;
        case 2: // USER_IDENTIFIER
          return USER_IDENTIFIER;
        case 3: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROVIDER_NAME, new org.apache.thrift.meta_data.FieldMetaData("providerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("userIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExternalAccount.class, metaDataMap);
  }

  public ExternalAccount() {
  }

  public ExternalAccount(
    String providerName,
    String userIdentifier,
    String accessToken)
  {
    this();
    this.providerName = providerName;
    this.userIdentifier = userIdentifier;
    this.accessToken = accessToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExternalAccount(ExternalAccount other) {
    if (other.isSetProviderName()) {
      this.providerName = other.providerName;
    }
    if (other.isSetUserIdentifier()) {
      this.userIdentifier = other.userIdentifier;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
  }

  public ExternalAccount deepCopy() {
    return new ExternalAccount(this);
  }

  @Override
  public void clear() {
    this.providerName = null;
    this.userIdentifier = null;
    this.accessToken = null;
  }

  public String getProviderName() {
    return this.providerName;
  }

  public ExternalAccount setProviderName(String providerName) {
    this.providerName = providerName;
    return this;
  }

  public void unsetProviderName() {
    this.providerName = null;
  }

  /** Returns true if field providerName is set (has been assigned a value) and false otherwise */
  public boolean isSetProviderName() {
    return this.providerName != null;
  }

  public void setProviderNameIsSet(boolean value) {
    if (!value) {
      this.providerName = null;
    }
  }

  public String getUserIdentifier() {
    return this.userIdentifier;
  }

  public ExternalAccount setUserIdentifier(String userIdentifier) {
    this.userIdentifier = userIdentifier;
    return this;
  }

  public void unsetUserIdentifier() {
    this.userIdentifier = null;
  }

  /** Returns true if field userIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdentifier() {
    return this.userIdentifier != null;
  }

  public void setUserIdentifierIsSet(boolean value) {
    if (!value) {
      this.userIdentifier = null;
    }
  }

  public String getAccessToken() {
    return this.accessToken;
  }

  public ExternalAccount setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROVIDER_NAME:
      if (value == null) {
        unsetProviderName();
      } else {
        setProviderName((String)value);
      }
      break;

    case USER_IDENTIFIER:
      if (value == null) {
        unsetUserIdentifier();
      } else {
        setUserIdentifier((String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROVIDER_NAME:
      return getProviderName();

    case USER_IDENTIFIER:
      return getUserIdentifier();

    case ACCESS_TOKEN:
      return getAccessToken();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROVIDER_NAME:
      return isSetProviderName();
    case USER_IDENTIFIER:
      return isSetUserIdentifier();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExternalAccount)
      return this.equals((ExternalAccount)that);
    return false;
  }

  public boolean equals(ExternalAccount that) {
    if (that == null)
      return false;

    boolean this_present_providerName = true && this.isSetProviderName();
    boolean that_present_providerName = true && that.isSetProviderName();
    if (this_present_providerName || that_present_providerName) {
      if (!(this_present_providerName && that_present_providerName))
        return false;
      if (!this.providerName.equals(that.providerName))
        return false;
    }

    boolean this_present_userIdentifier = true && this.isSetUserIdentifier();
    boolean that_present_userIdentifier = true && that.isSetUserIdentifier();
    if (this_present_userIdentifier || that_present_userIdentifier) {
      if (!(this_present_userIdentifier && that_present_userIdentifier))
        return false;
      if (!this.userIdentifier.equals(that.userIdentifier))
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_providerName = true && (isSetProviderName());
    builder.append(present_providerName);
    if (present_providerName)
      builder.append(providerName);

    boolean present_userIdentifier = true && (isSetUserIdentifier());
    builder.append(present_userIdentifier);
    if (present_userIdentifier)
      builder.append(userIdentifier);

    boolean present_accessToken = true && (isSetAccessToken());
    builder.append(present_accessToken);
    if (present_accessToken)
      builder.append(accessToken);

    return builder.toHashCode();
  }

  public int compareTo(ExternalAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExternalAccount typedOther = (ExternalAccount)other;

    lastComparison = Boolean.valueOf(isSetProviderName()).compareTo(typedOther.isSetProviderName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProviderName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.providerName, typedOther.providerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdentifier()).compareTo(typedOther.isSetUserIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdentifier, typedOther.userIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExternalAccount(");
    boolean first = true;

    sb.append("providerName:");
    if (this.providerName == null) {
      sb.append("null");
    } else {
      sb.append(this.providerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdentifier:");
    if (this.userIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.userIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessToken:");
    if (this.accessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.accessToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExternalAccountStandardSchemeFactory implements SchemeFactory {
    public ExternalAccountStandardScheme getScheme() {
      return new ExternalAccountStandardScheme();
    }
  }

  private static class ExternalAccountStandardScheme extends StandardScheme<ExternalAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExternalAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROVIDER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.providerName = iprot.readString();
              struct.setProviderNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userIdentifier = iprot.readString();
              struct.setUserIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExternalAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.providerName != null) {
        oprot.writeFieldBegin(PROVIDER_NAME_FIELD_DESC);
        oprot.writeString(struct.providerName);
        oprot.writeFieldEnd();
      }
      if (struct.userIdentifier != null) {
        oprot.writeFieldBegin(USER_IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.userIdentifier);
        oprot.writeFieldEnd();
      }
      if (struct.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.accessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExternalAccountTupleSchemeFactory implements SchemeFactory {
    public ExternalAccountTupleScheme getScheme() {
      return new ExternalAccountTupleScheme();
    }
  }

  private static class ExternalAccountTupleScheme extends TupleScheme<ExternalAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExternalAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProviderName()) {
        optionals.set(0);
      }
      if (struct.isSetUserIdentifier()) {
        optionals.set(1);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProviderName()) {
        oprot.writeString(struct.providerName);
      }
      if (struct.isSetUserIdentifier()) {
        oprot.writeString(struct.userIdentifier);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExternalAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.providerName = iprot.readString();
        struct.setProviderNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userIdentifier = iprot.readString();
        struct.setUserIdentifierIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
    }
  }

}

