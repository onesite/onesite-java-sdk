/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.onesite.sdk.thrift.dao;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("accountStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SITE_FIELD_DESC = new org.apache.thrift.protocol.TField("site", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ACCOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("externalAccounts", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PREFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("preferences", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public long id; // required
  public String email; // required
  public String username; // required
  public String displayName; // required
  public String avatar; // required
  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.AccountStatus
   */
  public com.onesite.sdk.thrift.dao.constants.AccountStatus accountStatus; // required
  public Site site; // required
  public List<ExternalAccount> externalAccounts; // required
  public Profile profile; // required
  public Preferences preferences; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    EMAIL((short)2, "email"),
    USERNAME((short)3, "username"),
    DISPLAY_NAME((short)4, "displayName"),
    AVATAR((short)5, "avatar"),
    /**
     * 
     * @see com.onesite.sdk.thrift.dao.constants.AccountStatus
     */
    ACCOUNT_STATUS((short)6, "accountStatus"),
    SITE((short)7, "site"),
    EXTERNAL_ACCOUNTS((short)8, "externalAccounts"),
    PROFILE((short)9, "profile"),
    PREFERENCES((short)10, "preferences");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // EMAIL
          return EMAIL;
        case 3: // USERNAME
          return USERNAME;
        case 4: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 5: // AVATAR
          return AVATAR;
        case 6: // ACCOUNT_STATUS
          return ACCOUNT_STATUS;
        case 7: // SITE
          return SITE;
        case 8: // EXTERNAL_ACCOUNTS
          return EXTERNAL_ACCOUNTS;
        case 9: // PROFILE
          return PROFILE;
        case 10: // PREFERENCES
          return PREFERENCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("accountStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.onesite.sdk.thrift.dao.constants.AccountStatus.class)));
    tmpMap.put(_Fields.SITE, new org.apache.thrift.meta_data.FieldMetaData("site", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Site.class)));
    tmpMap.put(_Fields.EXTERNAL_ACCOUNTS, new org.apache.thrift.meta_data.FieldMetaData("externalAccounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExternalAccount.class))));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Profile.class)));
    tmpMap.put(_Fields.PREFERENCES, new org.apache.thrift.meta_data.FieldMetaData("preferences", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Preferences.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    long id,
    String email,
    String username,
    String displayName,
    String avatar,
    com.onesite.sdk.thrift.dao.constants.AccountStatus accountStatus,
    Site site,
    List<ExternalAccount> externalAccounts,
    Profile profile,
    Preferences preferences)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.email = email;
    this.username = username;
    this.displayName = displayName;
    this.avatar = avatar;
    this.accountStatus = accountStatus;
    this.site = site;
    this.externalAccounts = externalAccounts;
    this.profile = profile;
    this.preferences = preferences;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetAccountStatus()) {
      this.accountStatus = other.accountStatus;
    }
    if (other.isSetSite()) {
      this.site = new Site(other.site);
    }
    if (other.isSetExternalAccounts()) {
      List<ExternalAccount> __this__externalAccounts = new ArrayList<ExternalAccount>();
      for (ExternalAccount other_element : other.externalAccounts) {
        __this__externalAccounts.add(new ExternalAccount(other_element));
      }
      this.externalAccounts = __this__externalAccounts;
    }
    if (other.isSetProfile()) {
      this.profile = new Profile(other.profile);
    }
    if (other.isSetPreferences()) {
      this.preferences = new Preferences(other.preferences);
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.email = null;
    this.username = null;
    this.displayName = null;
    this.avatar = null;
    this.accountStatus = null;
    this.site = null;
    this.externalAccounts = null;
    this.profile = null;
    this.preferences = null;
  }

  public long getId() {
    return this.id;
  }

  public User setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getEmail() {
    return this.email;
  }

  public User setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public User setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public User setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public String getAvatar() {
    return this.avatar;
  }

  public User setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.AccountStatus
   */
  public com.onesite.sdk.thrift.dao.constants.AccountStatus getAccountStatus() {
    return this.accountStatus;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.AccountStatus
   */
  public User setAccountStatus(com.onesite.sdk.thrift.dao.constants.AccountStatus accountStatus) {
    this.accountStatus = accountStatus;
    return this;
  }

  public void unsetAccountStatus() {
    this.accountStatus = null;
  }

  /** Returns true if field accountStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountStatus() {
    return this.accountStatus != null;
  }

  public void setAccountStatusIsSet(boolean value) {
    if (!value) {
      this.accountStatus = null;
    }
  }

  public Site getSite() {
    return this.site;
  }

  public User setSite(Site site) {
    this.site = site;
    return this;
  }

  public void unsetSite() {
    this.site = null;
  }

  /** Returns true if field site is set (has been assigned a value) and false otherwise */
  public boolean isSetSite() {
    return this.site != null;
  }

  public void setSiteIsSet(boolean value) {
    if (!value) {
      this.site = null;
    }
  }

  public int getExternalAccountsSize() {
    return (this.externalAccounts == null) ? 0 : this.externalAccounts.size();
  }

  public java.util.Iterator<ExternalAccount> getExternalAccountsIterator() {
    return (this.externalAccounts == null) ? null : this.externalAccounts.iterator();
  }

  public void addToExternalAccounts(ExternalAccount elem) {
    if (this.externalAccounts == null) {
      this.externalAccounts = new ArrayList<ExternalAccount>();
    }
    this.externalAccounts.add(elem);
  }

  public List<ExternalAccount> getExternalAccounts() {
    return this.externalAccounts;
  }

  public User setExternalAccounts(List<ExternalAccount> externalAccounts) {
    this.externalAccounts = externalAccounts;
    return this;
  }

  public void unsetExternalAccounts() {
    this.externalAccounts = null;
  }

  /** Returns true if field externalAccounts is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAccounts() {
    return this.externalAccounts != null;
  }

  public void setExternalAccountsIsSet(boolean value) {
    if (!value) {
      this.externalAccounts = null;
    }
  }

  public Profile getProfile() {
    return this.profile;
  }

  public User setProfile(Profile profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public Preferences getPreferences() {
    return this.preferences;
  }

  public User setPreferences(Preferences preferences) {
    this.preferences = preferences;
    return this;
  }

  public void unsetPreferences() {
    this.preferences = null;
  }

  /** Returns true if field preferences is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferences() {
    return this.preferences != null;
  }

  public void setPreferencesIsSet(boolean value) {
    if (!value) {
      this.preferences = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case ACCOUNT_STATUS:
      if (value == null) {
        unsetAccountStatus();
      } else {
        setAccountStatus((com.onesite.sdk.thrift.dao.constants.AccountStatus)value);
      }
      break;

    case SITE:
      if (value == null) {
        unsetSite();
      } else {
        setSite((Site)value);
      }
      break;

    case EXTERNAL_ACCOUNTS:
      if (value == null) {
        unsetExternalAccounts();
      } else {
        setExternalAccounts((List<ExternalAccount>)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((Profile)value);
      }
      break;

    case PREFERENCES:
      if (value == null) {
        unsetPreferences();
      } else {
        setPreferences((Preferences)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case EMAIL:
      return getEmail();

    case USERNAME:
      return getUsername();

    case DISPLAY_NAME:
      return getDisplayName();

    case AVATAR:
      return getAvatar();

    case ACCOUNT_STATUS:
      return getAccountStatus();

    case SITE:
      return getSite();

    case EXTERNAL_ACCOUNTS:
      return getExternalAccounts();

    case PROFILE:
      return getProfile();

    case PREFERENCES:
      return getPreferences();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case EMAIL:
      return isSetEmail();
    case USERNAME:
      return isSetUsername();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case AVATAR:
      return isSetAvatar();
    case ACCOUNT_STATUS:
      return isSetAccountStatus();
    case SITE:
      return isSetSite();
    case EXTERNAL_ACCOUNTS:
      return isSetExternalAccounts();
    case PROFILE:
      return isSetProfile();
    case PREFERENCES:
      return isSetPreferences();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_accountStatus = true && this.isSetAccountStatus();
    boolean that_present_accountStatus = true && that.isSetAccountStatus();
    if (this_present_accountStatus || that_present_accountStatus) {
      if (!(this_present_accountStatus && that_present_accountStatus))
        return false;
      if (!this.accountStatus.equals(that.accountStatus))
        return false;
    }

    boolean this_present_site = true && this.isSetSite();
    boolean that_present_site = true && that.isSetSite();
    if (this_present_site || that_present_site) {
      if (!(this_present_site && that_present_site))
        return false;
      if (!this.site.equals(that.site))
        return false;
    }

    boolean this_present_externalAccounts = true && this.isSetExternalAccounts();
    boolean that_present_externalAccounts = true && that.isSetExternalAccounts();
    if (this_present_externalAccounts || that_present_externalAccounts) {
      if (!(this_present_externalAccounts && that_present_externalAccounts))
        return false;
      if (!this.externalAccounts.equals(that.externalAccounts))
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_preferences = true && this.isSetPreferences();
    boolean that_present_preferences = true && that.isSetPreferences();
    if (this_present_preferences || that_present_preferences) {
      if (!(this_present_preferences && that_present_preferences))
        return false;
      if (!this.preferences.equals(that.preferences))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_email = true && (isSetEmail());
    builder.append(present_email);
    if (present_email)
      builder.append(email);

    boolean present_username = true && (isSetUsername());
    builder.append(present_username);
    if (present_username)
      builder.append(username);

    boolean present_displayName = true && (isSetDisplayName());
    builder.append(present_displayName);
    if (present_displayName)
      builder.append(displayName);

    boolean present_avatar = true && (isSetAvatar());
    builder.append(present_avatar);
    if (present_avatar)
      builder.append(avatar);

    boolean present_accountStatus = true && (isSetAccountStatus());
    builder.append(present_accountStatus);
    if (present_accountStatus)
      builder.append(accountStatus.getValue());

    boolean present_site = true && (isSetSite());
    builder.append(present_site);
    if (present_site)
      builder.append(site);

    boolean present_externalAccounts = true && (isSetExternalAccounts());
    builder.append(present_externalAccounts);
    if (present_externalAccounts)
      builder.append(externalAccounts);

    boolean present_profile = true && (isSetProfile());
    builder.append(present_profile);
    if (present_profile)
      builder.append(profile);

    boolean present_preferences = true && (isSetPreferences());
    builder.append(present_preferences);
    if (present_preferences)
      builder.append(preferences);

    return builder.toHashCode();
  }

  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    User typedOther = (User)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(typedOther.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, typedOther.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountStatus()).compareTo(typedOther.isSetAccountStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountStatus, typedOther.accountStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSite()).compareTo(typedOther.isSetSite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site, typedOther.site);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalAccounts()).compareTo(typedOther.isSetExternalAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAccounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalAccounts, typedOther.externalAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferences()).compareTo(typedOther.isSetPreferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferences, typedOther.preferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar:");
    if (this.avatar == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountStatus:");
    if (this.accountStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.accountStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("site:");
    if (this.site == null) {
      sb.append("null");
    } else {
      sb.append(this.site);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("externalAccounts:");
    if (this.externalAccounts == null) {
      sb.append("null");
    } else {
      sb.append(this.externalAccounts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profile:");
    if (this.profile == null) {
      sb.append("null");
    } else {
      sb.append(this.profile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferences:");
    if (this.preferences == null) {
      sb.append("null");
    } else {
      sb.append(this.preferences);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountStatus = com.onesite.sdk.thrift.dao.constants.AccountStatus.findByValue(iprot.readI32());
              struct.setAccountStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.site = new Site();
              struct.site.read(iprot);
              struct.setSiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTERNAL_ACCOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.externalAccounts = new ArrayList<ExternalAccount>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ExternalAccount _elem2; // required
                  _elem2 = new ExternalAccount();
                  _elem2.read(iprot);
                  struct.externalAccounts.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setExternalAccountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profile = new Profile();
              struct.profile.read(iprot);
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PREFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.preferences = new Preferences();
              struct.preferences.read(iprot);
              struct.setPreferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        oprot.writeFieldBegin(AVATAR_FIELD_DESC);
        oprot.writeString(struct.avatar);
        oprot.writeFieldEnd();
      }
      if (struct.accountStatus != null) {
        oprot.writeFieldBegin(ACCOUNT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.accountStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.site != null) {
        oprot.writeFieldBegin(SITE_FIELD_DESC);
        struct.site.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.externalAccounts != null) {
        oprot.writeFieldBegin(EXTERNAL_ACCOUNTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.externalAccounts.size()));
          for (ExternalAccount _iter3 : struct.externalAccounts)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        struct.profile.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.preferences != null) {
        oprot.writeFieldBegin(PREFERENCES_FIELD_DESC);
        struct.preferences.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetEmail()) {
        optionals.set(1);
      }
      if (struct.isSetUsername()) {
        optionals.set(2);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(3);
      }
      if (struct.isSetAvatar()) {
        optionals.set(4);
      }
      if (struct.isSetAccountStatus()) {
        optionals.set(5);
      }
      if (struct.isSetSite()) {
        optionals.set(6);
      }
      if (struct.isSetExternalAccounts()) {
        optionals.set(7);
      }
      if (struct.isSetProfile()) {
        optionals.set(8);
      }
      if (struct.isSetPreferences()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetAccountStatus()) {
        oprot.writeI32(struct.accountStatus.getValue());
      }
      if (struct.isSetSite()) {
        struct.site.write(oprot);
      }
      if (struct.isSetExternalAccounts()) {
        {
          oprot.writeI32(struct.externalAccounts.size());
          for (ExternalAccount _iter4 : struct.externalAccounts)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetProfile()) {
        struct.profile.write(oprot);
      }
      if (struct.isSetPreferences()) {
        struct.preferences.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accountStatus = com.onesite.sdk.thrift.dao.constants.AccountStatus.findByValue(iprot.readI32());
        struct.setAccountStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.site = new Site();
        struct.site.read(iprot);
        struct.setSiteIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.externalAccounts = new ArrayList<ExternalAccount>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ExternalAccount _elem7; // required
            _elem7 = new ExternalAccount();
            _elem7.read(iprot);
            struct.externalAccounts.add(_elem7);
          }
        }
        struct.setExternalAccountsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.profile = new Profile();
        struct.profile.read(iprot);
        struct.setProfileIsSet(true);
      }
      if (incoming.get(9)) {
        struct.preferences = new Preferences();
        struct.preferences.read(iprot);
        struct.setPreferencesIsSet(true);
      }
    }
  }

}

