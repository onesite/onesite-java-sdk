/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.onesite.sdk.thrift.dao;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Preferences implements org.apache.thrift.TBase<Preferences, Preferences._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Preferences");

  private static final org.apache.thrift.protocol.TField BIRTHDAY_DISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthdayDisplay", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRIENDSHIP_APPROVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("friendshipApproval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENTS_APPROVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("commentsApproval", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_PRIVACY_FIELD_DESC = new org.apache.thrift.protocol.TField("messagePrivacy", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_NOTIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("emailNotification", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEARCHABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("searchable", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField SHOW_ONLINE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("showOnlineStatus", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PreferencesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PreferencesTupleSchemeFactory());
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.BirthdayDisplay
   */
  public com.onesite.sdk.thrift.dao.constants.BirthdayDisplay birthdayDisplay; // required
  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.FriendshipApproval
   */
  public com.onesite.sdk.thrift.dao.constants.FriendshipApproval friendshipApproval; // required
  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.CommentsApproval
   */
  public com.onesite.sdk.thrift.dao.constants.CommentsApproval commentsApproval; // required
  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.MessagePrivacy
   */
  public com.onesite.sdk.thrift.dao.constants.MessagePrivacy messagePrivacy; // required
  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.EmailNotification
   */
  public com.onesite.sdk.thrift.dao.constants.EmailNotification emailNotification; // required
  public boolean searchable; // required
  public boolean showOnlineStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.onesite.sdk.thrift.dao.constants.BirthdayDisplay
     */
    BIRTHDAY_DISPLAY((short)1, "birthdayDisplay"),
    /**
     * 
     * @see com.onesite.sdk.thrift.dao.constants.FriendshipApproval
     */
    FRIENDSHIP_APPROVAL((short)2, "friendshipApproval"),
    /**
     * 
     * @see com.onesite.sdk.thrift.dao.constants.CommentsApproval
     */
    COMMENTS_APPROVAL((short)3, "commentsApproval"),
    /**
     * 
     * @see com.onesite.sdk.thrift.dao.constants.MessagePrivacy
     */
    MESSAGE_PRIVACY((short)4, "messagePrivacy"),
    /**
     * 
     * @see com.onesite.sdk.thrift.dao.constants.EmailNotification
     */
    EMAIL_NOTIFICATION((short)5, "emailNotification"),
    SEARCHABLE((short)6, "searchable"),
    SHOW_ONLINE_STATUS((short)7, "showOnlineStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIRTHDAY_DISPLAY
          return BIRTHDAY_DISPLAY;
        case 2: // FRIENDSHIP_APPROVAL
          return FRIENDSHIP_APPROVAL;
        case 3: // COMMENTS_APPROVAL
          return COMMENTS_APPROVAL;
        case 4: // MESSAGE_PRIVACY
          return MESSAGE_PRIVACY;
        case 5: // EMAIL_NOTIFICATION
          return EMAIL_NOTIFICATION;
        case 6: // SEARCHABLE
          return SEARCHABLE;
        case 7: // SHOW_ONLINE_STATUS
          return SHOW_ONLINE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEARCHABLE_ISSET_ID = 0;
  private static final int __SHOWONLINESTATUS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIRTHDAY_DISPLAY, new org.apache.thrift.meta_data.FieldMetaData("birthdayDisplay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.onesite.sdk.thrift.dao.constants.BirthdayDisplay.class)));
    tmpMap.put(_Fields.FRIENDSHIP_APPROVAL, new org.apache.thrift.meta_data.FieldMetaData("friendshipApproval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.onesite.sdk.thrift.dao.constants.FriendshipApproval.class)));
    tmpMap.put(_Fields.COMMENTS_APPROVAL, new org.apache.thrift.meta_data.FieldMetaData("commentsApproval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.onesite.sdk.thrift.dao.constants.CommentsApproval.class)));
    tmpMap.put(_Fields.MESSAGE_PRIVACY, new org.apache.thrift.meta_data.FieldMetaData("messagePrivacy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.onesite.sdk.thrift.dao.constants.MessagePrivacy.class)));
    tmpMap.put(_Fields.EMAIL_NOTIFICATION, new org.apache.thrift.meta_data.FieldMetaData("emailNotification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.onesite.sdk.thrift.dao.constants.EmailNotification.class)));
    tmpMap.put(_Fields.SEARCHABLE, new org.apache.thrift.meta_data.FieldMetaData("searchable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOW_ONLINE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("showOnlineStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Preferences.class, metaDataMap);
  }

  public Preferences() {
  }

  public Preferences(
    com.onesite.sdk.thrift.dao.constants.BirthdayDisplay birthdayDisplay,
    com.onesite.sdk.thrift.dao.constants.FriendshipApproval friendshipApproval,
    com.onesite.sdk.thrift.dao.constants.CommentsApproval commentsApproval,
    com.onesite.sdk.thrift.dao.constants.MessagePrivacy messagePrivacy,
    com.onesite.sdk.thrift.dao.constants.EmailNotification emailNotification,
    boolean searchable,
    boolean showOnlineStatus)
  {
    this();
    this.birthdayDisplay = birthdayDisplay;
    this.friendshipApproval = friendshipApproval;
    this.commentsApproval = commentsApproval;
    this.messagePrivacy = messagePrivacy;
    this.emailNotification = emailNotification;
    this.searchable = searchable;
    setSearchableIsSet(true);
    this.showOnlineStatus = showOnlineStatus;
    setShowOnlineStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Preferences(Preferences other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetBirthdayDisplay()) {
      this.birthdayDisplay = other.birthdayDisplay;
    }
    if (other.isSetFriendshipApproval()) {
      this.friendshipApproval = other.friendshipApproval;
    }
    if (other.isSetCommentsApproval()) {
      this.commentsApproval = other.commentsApproval;
    }
    if (other.isSetMessagePrivacy()) {
      this.messagePrivacy = other.messagePrivacy;
    }
    if (other.isSetEmailNotification()) {
      this.emailNotification = other.emailNotification;
    }
    this.searchable = other.searchable;
    this.showOnlineStatus = other.showOnlineStatus;
  }

  public Preferences deepCopy() {
    return new Preferences(this);
  }

  @Override
  public void clear() {
    this.birthdayDisplay = null;
    this.friendshipApproval = null;
    this.commentsApproval = null;
    this.messagePrivacy = null;
    this.emailNotification = null;
    setSearchableIsSet(false);
    this.searchable = false;
    setShowOnlineStatusIsSet(false);
    this.showOnlineStatus = false;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.BirthdayDisplay
   */
  public com.onesite.sdk.thrift.dao.constants.BirthdayDisplay getBirthdayDisplay() {
    return this.birthdayDisplay;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.BirthdayDisplay
   */
  public Preferences setBirthdayDisplay(com.onesite.sdk.thrift.dao.constants.BirthdayDisplay birthdayDisplay) {
    this.birthdayDisplay = birthdayDisplay;
    return this;
  }

  public void unsetBirthdayDisplay() {
    this.birthdayDisplay = null;
  }

  /** Returns true if field birthdayDisplay is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthdayDisplay() {
    return this.birthdayDisplay != null;
  }

  public void setBirthdayDisplayIsSet(boolean value) {
    if (!value) {
      this.birthdayDisplay = null;
    }
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.FriendshipApproval
   */
  public com.onesite.sdk.thrift.dao.constants.FriendshipApproval getFriendshipApproval() {
    return this.friendshipApproval;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.FriendshipApproval
   */
  public Preferences setFriendshipApproval(com.onesite.sdk.thrift.dao.constants.FriendshipApproval friendshipApproval) {
    this.friendshipApproval = friendshipApproval;
    return this;
  }

  public void unsetFriendshipApproval() {
    this.friendshipApproval = null;
  }

  /** Returns true if field friendshipApproval is set (has been assigned a value) and false otherwise */
  public boolean isSetFriendshipApproval() {
    return this.friendshipApproval != null;
  }

  public void setFriendshipApprovalIsSet(boolean value) {
    if (!value) {
      this.friendshipApproval = null;
    }
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.CommentsApproval
   */
  public com.onesite.sdk.thrift.dao.constants.CommentsApproval getCommentsApproval() {
    return this.commentsApproval;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.CommentsApproval
   */
  public Preferences setCommentsApproval(com.onesite.sdk.thrift.dao.constants.CommentsApproval commentsApproval) {
    this.commentsApproval = commentsApproval;
    return this;
  }

  public void unsetCommentsApproval() {
    this.commentsApproval = null;
  }

  /** Returns true if field commentsApproval is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentsApproval() {
    return this.commentsApproval != null;
  }

  public void setCommentsApprovalIsSet(boolean value) {
    if (!value) {
      this.commentsApproval = null;
    }
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.MessagePrivacy
   */
  public com.onesite.sdk.thrift.dao.constants.MessagePrivacy getMessagePrivacy() {
    return this.messagePrivacy;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.MessagePrivacy
   */
  public Preferences setMessagePrivacy(com.onesite.sdk.thrift.dao.constants.MessagePrivacy messagePrivacy) {
    this.messagePrivacy = messagePrivacy;
    return this;
  }

  public void unsetMessagePrivacy() {
    this.messagePrivacy = null;
  }

  /** Returns true if field messagePrivacy is set (has been assigned a value) and false otherwise */
  public boolean isSetMessagePrivacy() {
    return this.messagePrivacy != null;
  }

  public void setMessagePrivacyIsSet(boolean value) {
    if (!value) {
      this.messagePrivacy = null;
    }
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.EmailNotification
   */
  public com.onesite.sdk.thrift.dao.constants.EmailNotification getEmailNotification() {
    return this.emailNotification;
  }

  /**
   * 
   * @see com.onesite.sdk.thrift.dao.constants.EmailNotification
   */
  public Preferences setEmailNotification(com.onesite.sdk.thrift.dao.constants.EmailNotification emailNotification) {
    this.emailNotification = emailNotification;
    return this;
  }

  public void unsetEmailNotification() {
    this.emailNotification = null;
  }

  /** Returns true if field emailNotification is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailNotification() {
    return this.emailNotification != null;
  }

  public void setEmailNotificationIsSet(boolean value) {
    if (!value) {
      this.emailNotification = null;
    }
  }

  public boolean isSearchable() {
    return this.searchable;
  }

  public Preferences setSearchable(boolean searchable) {
    this.searchable = searchable;
    setSearchableIsSet(true);
    return this;
  }

  public void unsetSearchable() {
    __isset_bit_vector.clear(__SEARCHABLE_ISSET_ID);
  }

  /** Returns true if field searchable is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchable() {
    return __isset_bit_vector.get(__SEARCHABLE_ISSET_ID);
  }

  public void setSearchableIsSet(boolean value) {
    __isset_bit_vector.set(__SEARCHABLE_ISSET_ID, value);
  }

  public boolean isShowOnlineStatus() {
    return this.showOnlineStatus;
  }

  public Preferences setShowOnlineStatus(boolean showOnlineStatus) {
    this.showOnlineStatus = showOnlineStatus;
    setShowOnlineStatusIsSet(true);
    return this;
  }

  public void unsetShowOnlineStatus() {
    __isset_bit_vector.clear(__SHOWONLINESTATUS_ISSET_ID);
  }

  /** Returns true if field showOnlineStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetShowOnlineStatus() {
    return __isset_bit_vector.get(__SHOWONLINESTATUS_ISSET_ID);
  }

  public void setShowOnlineStatusIsSet(boolean value) {
    __isset_bit_vector.set(__SHOWONLINESTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BIRTHDAY_DISPLAY:
      if (value == null) {
        unsetBirthdayDisplay();
      } else {
        setBirthdayDisplay((com.onesite.sdk.thrift.dao.constants.BirthdayDisplay)value);
      }
      break;

    case FRIENDSHIP_APPROVAL:
      if (value == null) {
        unsetFriendshipApproval();
      } else {
        setFriendshipApproval((com.onesite.sdk.thrift.dao.constants.FriendshipApproval)value);
      }
      break;

    case COMMENTS_APPROVAL:
      if (value == null) {
        unsetCommentsApproval();
      } else {
        setCommentsApproval((com.onesite.sdk.thrift.dao.constants.CommentsApproval)value);
      }
      break;

    case MESSAGE_PRIVACY:
      if (value == null) {
        unsetMessagePrivacy();
      } else {
        setMessagePrivacy((com.onesite.sdk.thrift.dao.constants.MessagePrivacy)value);
      }
      break;

    case EMAIL_NOTIFICATION:
      if (value == null) {
        unsetEmailNotification();
      } else {
        setEmailNotification((com.onesite.sdk.thrift.dao.constants.EmailNotification)value);
      }
      break;

    case SEARCHABLE:
      if (value == null) {
        unsetSearchable();
      } else {
        setSearchable((Boolean)value);
      }
      break;

    case SHOW_ONLINE_STATUS:
      if (value == null) {
        unsetShowOnlineStatus();
      } else {
        setShowOnlineStatus((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BIRTHDAY_DISPLAY:
      return getBirthdayDisplay();

    case FRIENDSHIP_APPROVAL:
      return getFriendshipApproval();

    case COMMENTS_APPROVAL:
      return getCommentsApproval();

    case MESSAGE_PRIVACY:
      return getMessagePrivacy();

    case EMAIL_NOTIFICATION:
      return getEmailNotification();

    case SEARCHABLE:
      return Boolean.valueOf(isSearchable());

    case SHOW_ONLINE_STATUS:
      return Boolean.valueOf(isShowOnlineStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BIRTHDAY_DISPLAY:
      return isSetBirthdayDisplay();
    case FRIENDSHIP_APPROVAL:
      return isSetFriendshipApproval();
    case COMMENTS_APPROVAL:
      return isSetCommentsApproval();
    case MESSAGE_PRIVACY:
      return isSetMessagePrivacy();
    case EMAIL_NOTIFICATION:
      return isSetEmailNotification();
    case SEARCHABLE:
      return isSetSearchable();
    case SHOW_ONLINE_STATUS:
      return isSetShowOnlineStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Preferences)
      return this.equals((Preferences)that);
    return false;
  }

  public boolean equals(Preferences that) {
    if (that == null)
      return false;

    boolean this_present_birthdayDisplay = true && this.isSetBirthdayDisplay();
    boolean that_present_birthdayDisplay = true && that.isSetBirthdayDisplay();
    if (this_present_birthdayDisplay || that_present_birthdayDisplay) {
      if (!(this_present_birthdayDisplay && that_present_birthdayDisplay))
        return false;
      if (!this.birthdayDisplay.equals(that.birthdayDisplay))
        return false;
    }

    boolean this_present_friendshipApproval = true && this.isSetFriendshipApproval();
    boolean that_present_friendshipApproval = true && that.isSetFriendshipApproval();
    if (this_present_friendshipApproval || that_present_friendshipApproval) {
      if (!(this_present_friendshipApproval && that_present_friendshipApproval))
        return false;
      if (!this.friendshipApproval.equals(that.friendshipApproval))
        return false;
    }

    boolean this_present_commentsApproval = true && this.isSetCommentsApproval();
    boolean that_present_commentsApproval = true && that.isSetCommentsApproval();
    if (this_present_commentsApproval || that_present_commentsApproval) {
      if (!(this_present_commentsApproval && that_present_commentsApproval))
        return false;
      if (!this.commentsApproval.equals(that.commentsApproval))
        return false;
    }

    boolean this_present_messagePrivacy = true && this.isSetMessagePrivacy();
    boolean that_present_messagePrivacy = true && that.isSetMessagePrivacy();
    if (this_present_messagePrivacy || that_present_messagePrivacy) {
      if (!(this_present_messagePrivacy && that_present_messagePrivacy))
        return false;
      if (!this.messagePrivacy.equals(that.messagePrivacy))
        return false;
    }

    boolean this_present_emailNotification = true && this.isSetEmailNotification();
    boolean that_present_emailNotification = true && that.isSetEmailNotification();
    if (this_present_emailNotification || that_present_emailNotification) {
      if (!(this_present_emailNotification && that_present_emailNotification))
        return false;
      if (!this.emailNotification.equals(that.emailNotification))
        return false;
    }

    boolean this_present_searchable = true;
    boolean that_present_searchable = true;
    if (this_present_searchable || that_present_searchable) {
      if (!(this_present_searchable && that_present_searchable))
        return false;
      if (this.searchable != that.searchable)
        return false;
    }

    boolean this_present_showOnlineStatus = true;
    boolean that_present_showOnlineStatus = true;
    if (this_present_showOnlineStatus || that_present_showOnlineStatus) {
      if (!(this_present_showOnlineStatus && that_present_showOnlineStatus))
        return false;
      if (this.showOnlineStatus != that.showOnlineStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_birthdayDisplay = true && (isSetBirthdayDisplay());
    builder.append(present_birthdayDisplay);
    if (present_birthdayDisplay)
      builder.append(birthdayDisplay.getValue());

    boolean present_friendshipApproval = true && (isSetFriendshipApproval());
    builder.append(present_friendshipApproval);
    if (present_friendshipApproval)
      builder.append(friendshipApproval.getValue());

    boolean present_commentsApproval = true && (isSetCommentsApproval());
    builder.append(present_commentsApproval);
    if (present_commentsApproval)
      builder.append(commentsApproval.getValue());

    boolean present_messagePrivacy = true && (isSetMessagePrivacy());
    builder.append(present_messagePrivacy);
    if (present_messagePrivacy)
      builder.append(messagePrivacy.getValue());

    boolean present_emailNotification = true && (isSetEmailNotification());
    builder.append(present_emailNotification);
    if (present_emailNotification)
      builder.append(emailNotification.getValue());

    boolean present_searchable = true;
    builder.append(present_searchable);
    if (present_searchable)
      builder.append(searchable);

    boolean present_showOnlineStatus = true;
    builder.append(present_showOnlineStatus);
    if (present_showOnlineStatus)
      builder.append(showOnlineStatus);

    return builder.toHashCode();
  }

  public int compareTo(Preferences other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Preferences typedOther = (Preferences)other;

    lastComparison = Boolean.valueOf(isSetBirthdayDisplay()).compareTo(typedOther.isSetBirthdayDisplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthdayDisplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthdayDisplay, typedOther.birthdayDisplay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriendshipApproval()).compareTo(typedOther.isSetFriendshipApproval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriendshipApproval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendshipApproval, typedOther.friendshipApproval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentsApproval()).compareTo(typedOther.isSetCommentsApproval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentsApproval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentsApproval, typedOther.commentsApproval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessagePrivacy()).compareTo(typedOther.isSetMessagePrivacy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessagePrivacy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messagePrivacy, typedOther.messagePrivacy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmailNotification()).compareTo(typedOther.isSetEmailNotification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailNotification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailNotification, typedOther.emailNotification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchable()).compareTo(typedOther.isSetSearchable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchable, typedOther.searchable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowOnlineStatus()).compareTo(typedOther.isSetShowOnlineStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowOnlineStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showOnlineStatus, typedOther.showOnlineStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Preferences(");
    boolean first = true;

    sb.append("birthdayDisplay:");
    if (this.birthdayDisplay == null) {
      sb.append("null");
    } else {
      sb.append(this.birthdayDisplay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("friendshipApproval:");
    if (this.friendshipApproval == null) {
      sb.append("null");
    } else {
      sb.append(this.friendshipApproval);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentsApproval:");
    if (this.commentsApproval == null) {
      sb.append("null");
    } else {
      sb.append(this.commentsApproval);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messagePrivacy:");
    if (this.messagePrivacy == null) {
      sb.append("null");
    } else {
      sb.append(this.messagePrivacy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailNotification:");
    if (this.emailNotification == null) {
      sb.append("null");
    } else {
      sb.append(this.emailNotification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchable:");
    sb.append(this.searchable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showOnlineStatus:");
    sb.append(this.showOnlineStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PreferencesStandardSchemeFactory implements SchemeFactory {
    public PreferencesStandardScheme getScheme() {
      return new PreferencesStandardScheme();
    }
  }

  private static class PreferencesStandardScheme extends StandardScheme<Preferences> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Preferences struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIRTHDAY_DISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.birthdayDisplay = com.onesite.sdk.thrift.dao.constants.BirthdayDisplay.findByValue(iprot.readI32());
              struct.setBirthdayDisplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRIENDSHIP_APPROVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friendshipApproval = com.onesite.sdk.thrift.dao.constants.FriendshipApproval.findByValue(iprot.readI32());
              struct.setFriendshipApprovalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENTS_APPROVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentsApproval = com.onesite.sdk.thrift.dao.constants.CommentsApproval.findByValue(iprot.readI32());
              struct.setCommentsApprovalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_PRIVACY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messagePrivacy = com.onesite.sdk.thrift.dao.constants.MessagePrivacy.findByValue(iprot.readI32());
              struct.setMessagePrivacyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL_NOTIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emailNotification = com.onesite.sdk.thrift.dao.constants.EmailNotification.findByValue(iprot.readI32());
              struct.setEmailNotificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEARCHABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.searchable = iprot.readBool();
              struct.setSearchableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOW_ONLINE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showOnlineStatus = iprot.readBool();
              struct.setShowOnlineStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Preferences struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.birthdayDisplay != null) {
        oprot.writeFieldBegin(BIRTHDAY_DISPLAY_FIELD_DESC);
        oprot.writeI32(struct.birthdayDisplay.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.friendshipApproval != null) {
        oprot.writeFieldBegin(FRIENDSHIP_APPROVAL_FIELD_DESC);
        oprot.writeI32(struct.friendshipApproval.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.commentsApproval != null) {
        oprot.writeFieldBegin(COMMENTS_APPROVAL_FIELD_DESC);
        oprot.writeI32(struct.commentsApproval.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.messagePrivacy != null) {
        oprot.writeFieldBegin(MESSAGE_PRIVACY_FIELD_DESC);
        oprot.writeI32(struct.messagePrivacy.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.emailNotification != null) {
        oprot.writeFieldBegin(EMAIL_NOTIFICATION_FIELD_DESC);
        oprot.writeI32(struct.emailNotification.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEARCHABLE_FIELD_DESC);
      oprot.writeBool(struct.searchable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_ONLINE_STATUS_FIELD_DESC);
      oprot.writeBool(struct.showOnlineStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PreferencesTupleSchemeFactory implements SchemeFactory {
    public PreferencesTupleScheme getScheme() {
      return new PreferencesTupleScheme();
    }
  }

  private static class PreferencesTupleScheme extends TupleScheme<Preferences> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Preferences struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBirthdayDisplay()) {
        optionals.set(0);
      }
      if (struct.isSetFriendshipApproval()) {
        optionals.set(1);
      }
      if (struct.isSetCommentsApproval()) {
        optionals.set(2);
      }
      if (struct.isSetMessagePrivacy()) {
        optionals.set(3);
      }
      if (struct.isSetEmailNotification()) {
        optionals.set(4);
      }
      if (struct.isSetSearchable()) {
        optionals.set(5);
      }
      if (struct.isSetShowOnlineStatus()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBirthdayDisplay()) {
        oprot.writeI32(struct.birthdayDisplay.getValue());
      }
      if (struct.isSetFriendshipApproval()) {
        oprot.writeI32(struct.friendshipApproval.getValue());
      }
      if (struct.isSetCommentsApproval()) {
        oprot.writeI32(struct.commentsApproval.getValue());
      }
      if (struct.isSetMessagePrivacy()) {
        oprot.writeI32(struct.messagePrivacy.getValue());
      }
      if (struct.isSetEmailNotification()) {
        oprot.writeI32(struct.emailNotification.getValue());
      }
      if (struct.isSetSearchable()) {
        oprot.writeBool(struct.searchable);
      }
      if (struct.isSetShowOnlineStatus()) {
        oprot.writeBool(struct.showOnlineStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Preferences struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.birthdayDisplay = com.onesite.sdk.thrift.dao.constants.BirthdayDisplay.findByValue(iprot.readI32());
        struct.setBirthdayDisplayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.friendshipApproval = com.onesite.sdk.thrift.dao.constants.FriendshipApproval.findByValue(iprot.readI32());
        struct.setFriendshipApprovalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commentsApproval = com.onesite.sdk.thrift.dao.constants.CommentsApproval.findByValue(iprot.readI32());
        struct.setCommentsApprovalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.messagePrivacy = com.onesite.sdk.thrift.dao.constants.MessagePrivacy.findByValue(iprot.readI32());
        struct.setMessagePrivacyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.emailNotification = com.onesite.sdk.thrift.dao.constants.EmailNotification.findByValue(iprot.readI32());
        struct.setEmailNotificationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.searchable = iprot.readBool();
        struct.setSearchableIsSet(true);
      }
      if (incoming.get(6)) {
        struct.showOnlineStatus = iprot.readBool();
        struct.setShowOnlineStatusIsSet(true);
      }
    }
  }

}

